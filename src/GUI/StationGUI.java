/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * StationGUI.java
 *
 * Created on Jun 24, 2011, 6:22:11 PM
 */
package GUI;

import javax.swing.*;
import db.*;
import java.sql.SQLException;
import java.text.NumberFormat;
import java.util.ArrayList;
import loans.Lender;
import loans.Station;
import loans.Transfer;

/**
 *
 * @author bryan
 */
public class StationGUI extends JFrame {

    private StationDAO dbStation;
    private TransferDAO dbTransfer;
    private Lender lender;
    private JFrame mainMenuGUI;

    /** Creates new form StationGUI */
    public StationGUI(Lender lender, JFrame mainMenuGUI) {
        this.lender = lender;
        this.mainMenuGUI = mainMenuGUI;
        dbStation = LoanManagerDAOFactory.getStationDAO();
        dbTransfer = LoanManagerDAOFactory.getTransferDAO();
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        addStationButton = new javax.swing.JButton();
        removeStationButton = new javax.swing.JButton();
        transfersButton = new javax.swing.JButton();
        closeStationButton = new javax.swing.JButton();
        stationBalanceButton = new javax.swing.JButton();
        mainMenuButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Loan Manager - Manage Stations");

        addStationButton.setText("Add Station");
        addStationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addStationButtonActionPerformed(evt);
            }
        });

        removeStationButton.setText("Remove Station");
        removeStationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeStationButtonActionPerformed(evt);
            }
        });

        transfersButton.setText("Transfers");
        transfersButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transfersButtonActionPerformed(evt);
            }
        });

        closeStationButton.setText("Close Station");
        closeStationButton.setEnabled(false);
        closeStationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeStationButtonActionPerformed(evt);
            }
        });

        stationBalanceButton.setText("Station Balance");
        stationBalanceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stationBalanceButtonActionPerformed(evt);
            }
        });

        mainMenuButton.setText("Main Menu");
        mainMenuButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainMenuButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(mainMenuButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(stationBalanceButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(closeStationButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(transfersButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(addStationButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(removeStationButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(281, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addStationButton)
                .addGap(18, 18, 18)
                .addComponent(removeStationButton)
                .addGap(18, 18, 18)
                .addComponent(transfersButton)
                .addGap(18, 18, 18)
                .addComponent(closeStationButton)
                .addGap(18, 18, 18)
                .addComponent(stationBalanceButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 68, Short.MAX_VALUE)
                .addComponent(mainMenuButton)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addStationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addStationButtonActionPerformed
        JTextField stationNumTxtField = new JTextField();
        JTextField descTxtField = new JTextField();

        // goes into the JOptionPane
        JComponent[] inputs = new JComponent[]{
            new JLabel("Station Number"), stationNumTxtField,
            new JLabel("Optional Description"), descTxtField,};

        int result = JOptionPane.showOptionDialog(rootPane, inputs,
                "New Station", JOptionPane.OK_CANCEL_OPTION,
                JOptionPane.PLAIN_MESSAGE, null, null, null);

        if (result != JOptionPane.CLOSED_OPTION
                && result != JOptionPane.CANCEL_OPTION) {
            String stationNumStr = stationNumTxtField.getText();
            String descStr = descTxtField.getText();


            if (!stationNumStr.isEmpty()) {
                try {
                    int stationNum = Integer.parseInt(stationNumStr);

                    if (dbStation.getStation(stationNum) == null) {
                        Station newStation = new Station(stationNum, descStr);
                        dbStation.insertStation(newStation);

                        LoanManagerDAOFactory.commit();
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Station Already Exists! "
                                + "Station Not Added", "Error", JOptionPane.ERROR_MESSAGE);
                    }

                } catch (NumberFormatException nfe) {
                    String msg = "Not A Valid Number.";
                    printErrorMsg(nfe, msg);
                } catch (SQLException sqle) {
                    String msg = "SQL Exception: Unable to Access Station Table: "
                            + "Error creating station";
                    printErrorMsg(sqle, msg);
                    try {
                        LoanManagerDAOFactory.rollBack();
                    } catch (SQLException sqle2) {
                        String msg2 = "Unable to rollback SQL Transaction. "
                                + "Problem with the database: Contact Bryan\n\n"
                                + "Exiting Application";
                        printErrorMsg(sqle2, msg2);
                        System.exit(1);
                    }
                } catch (ClassNotFoundException cnfe) {
                    String msg = "Class Not Found Error: Station not created";
                    printErrorMsg(cnfe, msg);
                    try {
                        LoanManagerDAOFactory.rollBack();
                    } catch (SQLException sqle2) {
                        String msg2 = "Unable to rollback SQL Transaction. "
                                + "Problem with the database: Contact Bryan\n\n"
                                + "Exiting Application";
                        printErrorMsg(sqle2, msg2);
                        System.exit(1);
                    }
                }

            } else {
                JOptionPane.showMessageDialog(rootPane, "Need A Station Number! "
                        + "Station Not Added", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_addStationButtonActionPerformed

    private void removeStationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeStationButtonActionPerformed
        try {
            ArrayList<Station> stationList = dbStation.getStationRS();

            JComboBox stComboBox = new JComboBox(stationList.toArray());
            stComboBox.setSelectedItem(0);

            // goes into the JOptionPane
            JComponent[] inputs = new JComponent[]{
                new JLabel("Station Number"), stComboBox,};

            int result = JOptionPane.showOptionDialog(rootPane, inputs,
                    "Remove Station", JOptionPane.OK_CANCEL_OPTION,
                    JOptionPane.PLAIN_MESSAGE, null, null, null);

            if (result != JOptionPane.CLOSED_OPTION
                    && result != JOptionPane.CANCEL_OPTION) {
                Station st = (Station) stComboBox.getSelectedItem();

                if (st.getCurBal() == 0) {
                    dbStation.removeStation(((Station) stComboBox.getSelectedItem()).getStationNum());
                    LoanManagerDAOFactory.commit();

                } else {
                    JOptionPane.showMessageDialog(rootPane, "Station must have a "
                            + "balance of $0.00 to be removed. "
                            + "Station Not Removed", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (NumberFormatException nfe) {
            String msg = "Not A Valid Number.";
            printErrorMsg(nfe, msg);
        } catch (SQLException sqle) {
            String msg = "SQL Exception: Unable to Access Station Table: "
                    + "Error creating station";
            printErrorMsg(sqle, msg);
            try {
                LoanManagerDAOFactory.rollBack();
            } catch (SQLException sqle2) {
                String msg2 = "Unable to rollback SQL Transaction. "
                        + "Problem with the database: Contact Bryan\n\n"
                        + "Exiting Application";
                printErrorMsg(sqle2, msg2);
                System.exit(1);
            }
        } catch (ClassNotFoundException cnfe) {
            String msg = "Class Not Found Error: Station not created";
            printErrorMsg(cnfe, msg);
            try {
                LoanManagerDAOFactory.rollBack();
            } catch (SQLException sqle2) {
                String msg2 = "Unable to rollback SQL Transaction. "
                        + "Problem with the database: Contact Bryan\n\n"
                        + "Exiting Application";
                printErrorMsg(sqle2, msg2);
                System.exit(1);
            }
        }
    }//GEN-LAST:event_removeStationButtonActionPerformed

    private void transfersButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transfersButtonActionPerformed
        try {
            ArrayList<Station> stationList = dbStation.getStationRS();
            stationList.add(0, new Station(-1, "Bank"));

            JComboBox fromComboBox = new JComboBox(stationList.toArray());
            JComboBox toComboBox = new JComboBox(stationList.toArray());
            JTextField amountTxtField = new JTextField();

            // goes into the JOptionPane
            JComponent[] inputs = new JComponent[]{
                new JLabel("From: "), fromComboBox,
                new JLabel("To: "), toComboBox,
                new JLabel("Amount: "), amountTxtField};

            int result = JOptionPane.showOptionDialog(rootPane, inputs,
                    "Transfer", JOptionPane.OK_CANCEL_OPTION,
                    JOptionPane.PLAIN_MESSAGE, null, null, null);

            if (result != JOptionPane.CLOSED_OPTION
                    && result != JOptionPane.CANCEL_OPTION) {
                Station fromStation = (Station) fromComboBox.getSelectedItem();
                Station toStation = (Station) toComboBox.getSelectedItem();
                double amount = Double.parseDouble(amountTxtField.getText());

                if (amount > 0) {
                    if ((fromStation.getStationNum() < 0)
                            || (fromStation.getCurBal() >= amount)) {
                        if (fromStation.getStationNum() >= 0) {
                            fromStation.setCurBal(fromStation.getCurBal() - amount);
                        }

                        toStation.setCurBal(toStation.getCurBal() + amount);

                        Transfer curTransfer = new Transfer();
                        curTransfer.setTransferDate(lender.getCurDate());
                        curTransfer.setFromStation(fromStation.getStationNum());
                        curTransfer.setToStation(toStation.getStationNum());
                        curTransfer.setAmount(amount);

                        dbTransfer.insertTransfer(curTransfer);

                        if (!(fromStation.getStationNum() == -1)) {
                            dbStation.updateStation(fromStation);
                        }

                        if (!(toStation.getStationNum() == -1)) {
                            dbStation.updateStation(toStation);
                        }
                        

                        LoanManagerDAOFactory.commit();
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Not Enough Cash "
                                + "In The Drawer To Make Transfer", "Error", JOptionPane.ERROR_MESSAGE);
                    }

                } else {
                    JOptionPane.showMessageDialog(rootPane, "Enter an Amount to be  "
                            + "Transferred", "Error", JOptionPane.ERROR_MESSAGE);
                }

            }
        } catch (NumberFormatException nfe) {
            String msg = "Not A Valid Number.";
            printErrorMsg(nfe, msg);
        } catch (SQLException sqle) {
            String msg = "SQL Exception: Unable to Access Station Table: "
                    + "Error creating station";
            printErrorMsg(sqle, msg);
            try {
                LoanManagerDAOFactory.rollBack();
            } catch (SQLException sqle2) {
                String msg2 = "Unable to rollback SQL Transaction. "
                        + "Problem with the database: Contact Bryan\n\n"
                        + "Exiting Application";
                printErrorMsg(sqle2, msg2);
                System.exit(1);
            }
        } catch (ClassNotFoundException cnfe) {
            String msg = "Class Not Found Error: Station not created";
            printErrorMsg(cnfe, msg);
            try {
                LoanManagerDAOFactory.rollBack();
            } catch (SQLException sqle2) {
                String msg2 = "Unable to rollback SQL Transaction. "
                        + "Problem with the database: Contact Bryan\n\n"
                        + "Exiting Application";
                printErrorMsg(sqle2, msg2);
                System.exit(1);
            }
        }
    }//GEN-LAST:event_transfersButtonActionPerformed

    private void closeStationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeStationButtonActionPerformed
        try {
            lender.closeStation();
            LoanManagerDAOFactory.commit();
        } catch (SQLException sqle) {
            String msg = "SQL Exception: Unable to Access Station Table: "
                    + "Error closing station";
            printErrorMsg(sqle, msg);
            try {
                LoanManagerDAOFactory.rollBack();
            } catch (SQLException sqle2) {
                String msg2 = "Unable to rollback SQL Transaction. "
                        + "Problem with the database: Contact Bryan\n\n"
                        + "Exiting Application";
                printErrorMsg(sqle2, msg2);
                System.exit(1);
            }
        } catch (ClassNotFoundException cnfe) {
            String msg = "Class Not Found Error: Station not closed";
            printErrorMsg(cnfe, msg);
            try {
                LoanManagerDAOFactory.rollBack();
            } catch (SQLException sqle2) {
                String msg2 = "Unable to rollback SQL Transaction. "
                        + "Problem with the database: Contact Bryan\n\n"
                        + "Exiting Application";
                printErrorMsg(sqle2, msg2);
                System.exit(1);
            }
        }
    }//GEN-LAST:event_closeStationButtonActionPerformed

    private void stationBalanceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stationBalanceButtonActionPerformed
        try {
            ArrayList<Station> stationList = dbStation.getStationRS();

            JComboBox stComboBox = new JComboBox(stationList.toArray());
            stComboBox.setSelectedItem(0);

            // goes into the JOptionPane
            JComponent[] inputs = new JComponent[]{
                new JLabel("Station Number"), stComboBox,};

            int result = JOptionPane.showOptionDialog(rootPane, inputs,
                    "Station Balance", JOptionPane.OK_CANCEL_OPTION,
                    JOptionPane.PLAIN_MESSAGE, null, null, null);

            if (result != JOptionPane.CLOSED_OPTION
                    && result != JOptionPane.CANCEL_OPTION) {
                Station station = (Station) stComboBox.getSelectedItem();

                NumberFormat nf = NumberFormat.getCurrencyInstance();

                JOptionPane.showMessageDialog(rootPane, nf.format(station.getCurBal()), "Station Balance: ",
                        JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (SQLException sqle) {
            String msg = "SQL Exception: Unable to Access Station Table: "
                    + "Error accessing station";
            printErrorMsg(sqle, msg);
            try {
                LoanManagerDAOFactory.rollBack();
            } catch (SQLException sqle2) {
                String msg2 = "Unable to rollback SQL Transaction. "
                        + "Problem with the database: Contact Bryan\n\n"
                        + "Exiting Application";
                printErrorMsg(sqle2, msg2);
                System.exit(1);
            }
        } catch (ClassNotFoundException cnfe) {
            String msg = "Class Not Found Error: Station access error";
            printErrorMsg(cnfe, msg);
            try {
                LoanManagerDAOFactory.rollBack();
            } catch (SQLException sqle2) {
                String msg2 = "Unable to rollback SQL Transaction. "
                        + "Problem with the database: Contact Bryan\n\n"
                        + "Exiting Application";
                printErrorMsg(sqle2, msg2);
                System.exit(1);
            }
        }


    }//GEN-LAST:event_stationBalanceButtonActionPerformed

    private void mainMenuButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainMenuButtonActionPerformed
        mainMenuGUI.setVisible(true);
        setVisible(false);
    }//GEN-LAST:event_mainMenuButtonActionPerformed

    private void printErrorMsg(Exception e, String msg) {
        JOptionPane.showMessageDialog(rootPane, msg, "Error",
                JOptionPane.ERROR_MESSAGE);

        e.printStackTrace();
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addStationButton;
    private javax.swing.JButton closeStationButton;
    private javax.swing.JButton mainMenuButton;
    private javax.swing.JButton removeStationButton;
    private javax.swing.JButton stationBalanceButton;
    private javax.swing.JButton transfersButton;
    // End of variables declaration//GEN-END:variables
}
